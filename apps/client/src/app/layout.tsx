import type { Metadata } from 'next';
import { Geist, Geist_Mono } from 'next/font/google';
import './globals.css';
import Script from 'next/script';
import { WebSocketProvider } from '@/contexts/WebSocketContext';

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin']
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin']
});

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app'
};

export default function RootLayout({
  children
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        {/* Import map for TalkingHead ES modules */}
        <script
          type="importmap"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify({
              imports: {
                three:
                  'https://cdn.jsdelivr.net/npm/three@0.170.0/build/three.module.js',
                'three/addons/':
                  'https://cdn.jsdelivr.net/npm/three@0.170.0/examples/jsm/',
                talkinghead:
                  'https://cdn.jsdelivr.net/gh/met4citizen/TalkingHead@1.4/modules/talkinghead.mjs'
              }
            })
          }}
        />
      </head>

      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <WebSocketProvider>{children}</WebSocketProvider>

        {/* Load TalkingHead library */}
        <Script
          id="load-talkinghead"
          strategy="lazyOnload"
          dangerouslySetInnerHTML={{
            __html: `
              import('https://cdn.jsdelivr.net/gh/met4citizen/TalkingHead@1.4/modules/talkinghead.mjs')
                .then(module => {
                  window.TalkingHead = module.TalkingHead;
                  console.log('TalkingHead loaded globally');
                  window.dispatchEvent(new Event('talkinghead-loaded'));
                })
                .catch(err => {
                  console.error('Failed to load TalkingHead:', err);
                  window.dispatchEvent(new Event('talkinghead-error'));
                });
            `
          }}
        />
      </body>
    </html>
  );
}
